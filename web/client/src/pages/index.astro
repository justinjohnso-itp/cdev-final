---
const serverBaseUrl = import.meta.env.PUBLIC_SERVER_URL || 'http://localhost:3000';
const loginUrl = `${serverBaseUrl}/auth/login`;
---

<html lang="en">
<head>
	<meta charset="utf-8" />
	<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
	<meta name="viewport" content="width=device-width" />
	<meta name="generator" content={Astro.generator} />
	<title>Spotify LED Visualizer</title>
	<style>
		body {
			font-family: sans-serif;
			background-color: #121212;
			color: #ffffff;
			padding: 2rem;
			display: flex;
			flex-direction: column;
			align-items: center;
		}
		#login-section, #data-section {
			margin-top: 2rem;
			padding: 1.5rem;
			border: 1px solid #282828;
			border-radius: 8px;
			background-color: #181818;
			text-align: center;
		}
		#qr-code-canvas {
			margin-top: 1rem;
			background-color: white; /* Ensure QR code background is white */
			padding: 10px; /* Add padding around QR code */
			border-radius: 4px;
		}
		#data-section {
			display: none; /* Initially hidden */
			width: 80%;
			max-width: 600px;
		}
		#track-info {
			display: flex;
			align-items: center;
			gap: 1rem;
			margin-bottom: 1rem;
		}
		#track-info img {
			width: 100px;
			height: 100px;
			border-radius: 4px;
		}
		#track-details {
			text-align: left;
		}
		#audio-features pre {
			background-color: #282828;
			padding: 1rem;
			border-radius: 4px;
			text-align: left;
			overflow-x: auto;
		}
		.hidden {
			display: none;
		}
	</style>
</head>
<body>
	<h1>Spotify LED Visualizer</h1>

	<div id="login-section">
		<h2>Connect your Spotify Account</h2>
		<p>Scan the QR code below with your phone or <a href={loginUrl} target="_blank">click here</a> to log in.</p>
		<canvas id="qr-code-canvas"></canvas>
	</div>

	<div id="data-section">
		<h2>Currently Playing</h2>
		<div id="track-info">
			<img id="album-art" src="" alt="Album Art" class="hidden"/>
			<div id="track-details">
				<p id="track-name">Loading...</p>
				<p id="track-artist">...</p>
				<p id="track-album">...</p>
			</div>
		</div>
		<div id="audio-features">
			<h3>Audio Features</h3>
			<pre id="features-json">Loading...</pre>
		</div>
		<p id="not-playing" class="hidden">Nothing is currently playing.</p>
	</div>

	<script>
		import QRCode from 'qrcode';

		// Use Astro's variable directly in the script
		const loginUrl = "{loginUrl}";
		const serverBaseUrl = "{serverBaseUrl}";

		// DOM Elements (add null checks or assertions)
		const qrCanvas = document.getElementById('qr-code-canvas') as HTMLCanvasElement | null;
		const loginSection = document.getElementById('login-section') as HTMLElement | null;
		const dataSection = document.getElementById('data-section') as HTMLElement | null;
		const albumArtEl = document.getElementById('album-art') as HTMLImageElement | null;
		const trackNameEl = document.getElementById('track-name') as HTMLElement | null;
		const trackArtistEl = document.getElementById('track-artist') as HTMLElement | null;
		const trackAlbumEl = document.getElementById('track-album') as HTMLElement | null;
		const featuresJsonEl = document.getElementById('features-json') as HTMLElement | null;
		const notPlayingEl = document.getElementById('not-playing') as HTMLElement | null;

		async function generateQRCode() {
			if (!qrCanvas || !loginUrl) return;
			try {
				await QRCode.toCanvas(qrCanvas, loginUrl, { width: 200 });
				console.log('QR code generated for:', loginUrl);
			} catch (err) {
				console.error('Failed to generate QR code:', err);
				// Add null check for parentElement
				if (qrCanvas.parentElement) {
					qrCanvas.parentElement.innerHTML = '<p>Error generating QR code. Please use the login link.</p>';
				}
			}
		}

		// Function to fetch data from server API
		async function fetchData() {
			if (!dataSection || !loginSection) return; // Ensure sections exist

			try {
				// Fetch currently playing track
				const playingRes = await fetch(`${serverBaseUrl}/api/currently-playing`, { credentials: 'include' });

				if (playingRes.status === 401) {
					console.log('User not authenticated. Showing login.');
					loginSection.classList.remove('hidden');
					dataSection.classList.add('hidden');
					return; // Stop fetching if not logged in
				}

				if (!playingRes.ok) {
					throw new Error(`Failed to fetch currently playing: ${playingRes.statusText}`);
				}

				const playingData = await playingRes.json();

				// Show data section, hide login section if authenticated
				loginSection.classList.add('hidden');
				dataSection.classList.remove('hidden');

				if (playingData.isPlaying && playingData.item) {
					if (notPlayingEl) notPlayingEl.classList.add('hidden');
					if (albumArtEl) {
						albumArtEl.src = playingData.item.albumArtUrl || '';
						albumArtEl.classList.remove('hidden');
					}
					if (trackNameEl) trackNameEl.textContent = playingData.item.name;
					if (trackArtistEl) trackArtistEl.textContent = playingData.item.artists.join(', ');
					if (trackAlbumEl) trackAlbumEl.textContent = playingData.item.album;

					// Fetch audio features only if playing
					const featuresRes = await fetch(`${serverBaseUrl}/api/audio-features`, { credentials: 'include' });
					if (!featuresRes.ok) {
						throw new Error(`Failed to fetch audio features: ${featuresRes.statusText}`);
					}
					const featuresData = await featuresRes.json();
					if (featuresJsonEl && featuresData.features) {
						featuresJsonEl.textContent = JSON.stringify(featuresData.features, null, 2);
					} else if (featuresJsonEl) {
						featuresJsonEl.textContent = 'Could not load features.';
					}

				} else {
					// Handle case where user is logged in but not playing
					if (notPlayingEl) notPlayingEl.classList.remove('hidden');
					if (albumArtEl) albumArtEl.classList.add('hidden');
					if (trackNameEl) trackNameEl.textContent = '-';
					if (trackArtistEl) trackArtistEl.textContent = '-';
					if (trackAlbumEl) trackAlbumEl.textContent = '-';
					if (featuresJsonEl) featuresJsonEl.textContent = '-';
				}

			} catch (error) {
				console.error('Error fetching data:', error);
				// Optionally display an error message to the user
				if (dataSection && !loginSection?.classList.contains('hidden')) {
					// If we thought we were logged in but failed, show login again
					loginSection?.classList.remove('hidden');
					dataSection.classList.add('hidden');
				}
			}
		}

		// Generate QR code on load
		generateQRCode();

		// Fetch data immediately and then poll every 5 seconds
		fetchData();
		setInterval(fetchData, 5000);

	</script>
</body>
</html>
